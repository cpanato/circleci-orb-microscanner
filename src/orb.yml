version: 2.1

description: |
  This orb creates a wrapper for the Aqua Security MicroScanner. This tool is freely available on GitHub.
examples:
  simple_build_and_scan:
    description: Scan a newly built docker image with the Aqua Security microscanner.
    usage:
      version: 2.1

      orbs:
        microscanner: aquasecurity/microscanner@dev:0.1.1
      jobs:
        docker-build:
          executor: microscanner/default
          steps:
            - checkout
            - run: docker build -t myrepo/myimage:tag .

      workflows:
        scan-image:
          jobs:
            - docker-build
            - microscanner/scan-image:
                requires:
                  - docker-build
                context: myContext
                image: myrepo/myimage:mytag

executors:
  default:
    description: A debian-based machine executor.  Note that there is an
                 overhead for provisioning a machine executor as a result of
                 spinning up a private Docker server. Use of the machine key
                 may require additional fees.
    machine:
      image: circleci/classic:201808-01

commands:
  install:
    description: Create the runtime scanning
    parameters:
      token:
        description: The Aqua MicroScanner token
        type: string
        default: $AQUA_TOKEN
    steps:
      - run:
          name: Import scanning script
          command: |
            mkdir scanresult
            mkdir scantemp
            cd scantemp

            cat \<< 'EOF' > ./MicroScanner.sh
            #!/bin/bash
            set -euo pipefail
            AQUA_TOKEN="${AQUA_TOKEN:-}"
            MICROSCANNER_OPTIONS="${MICROSCANNER_OPTIONS:-}"
            DOCKER_IMAGE="${1:-}"
            TEMP_IMAGE_TAG=$(LC_CTYPE=C tr -dc 'a-zA-Z0-9' </dev/urandom | fold -w 32 | head -n 1 | tr '[:upper:]' '[:lower:]' || true)
            MICROSCANNER_SOURCE="https://get.aquasec.com/microscanner"

            main() {
              [[ -z ${DOCKER_IMAGE} ]] && {
                print_usage
                exit 1
              }

              trap cleanup EXIT

              TEMP_DIR=$(mktemp -d)
              cd "${TEMP_DIR}"

              {
                echo "FROM ${DOCKER_IMAGE}"
                echo "USER root"

            cat \<<"EOL"
            RUN if [ ! -d /etc/ssl/certs/ ] || { [ ! -f /etc/ssl/certs/ca-certificates.crt ] && [ ! -f /etc/ssl/certs/ca-bundle.crt ]; }; then \
              PACKAGE_MANAGER=$(basename \
                $({ command -v apk apt yum false 2>/dev/null || which apk apt yum false; } \
                | head -n1)); \
              if [ "${PACKAGE_MANAGER}" = "apk" ]; then \
                apk --update add ca-certificates; \
              elif [ "${PACKAGE_MANAGER}" = "apt" ]; then \
                apt update \
                  && apt install --no-install-recommends -y ca-certificates \
                  && update-ca-certificates; \
              elif [ "${PACKAGE_MANAGER}" = "yum" ]; then \
                yum install -y ca-certificates; \
              else \
                echo 'ca-certificates not found and package manager not apk, apt, or yum. Aborting' >&2; \
                exit 1; \
              fi; \
            fi;
            EOL

            cat \<<EOL
            ADD ${MICROSCANNER_SOURCE} /tmp/microscanner
            USER root
            RUN [ -x /tmp/microscanner ] || chmod +x /tmp/microscanner \
            && sync \
            && /tmp/microscanner --version \
            && /tmp/microscanner ${MICROSCANNER_OPTIONS} ${AQUA_TOKEN}
            EOL

              } | docker build --force-rm -t ${TEMP_IMAGE_TAG} -f - .
              }

             print_usage() {
              echo "Usage: ./MicroScanner.sh DOCKER_IMAGE"
              }

              cleanup() {
                if docker inspect --type=image "${TEMP_IMAGE_TAG}" &>/dev/null; then
                  docker image rm --force "${TEMP_IMAGE_TAG}" || true
                fi
                rm -rf "${TEMP_DIR}" || true
              }

            main
            EOF
            chmod +x ./MicroScanner.sh
  scan:
    description: Scan the container image
    parameters:
      token:
        description: The Aqua MicroScanner token
        type: string
        default: $AQUA_TOKEN
      microscanner_options:
        description: This var allows for option flags to be passed to the MicroScanner.
        type: string
        default: $MICROSCANNER_OPTIONS
      image:
        description: The image to scan
        type: string
      artifact-type:
        description: The type of artifact to output; html is default, json is optional.
        type: string
        default: html
    steps:
      - run:
          name: Scan for vulneribilities and upload report artifact
          command: |
            cd scantemp
            if [[ <<parameters.artifact-type>> == html ]]; then
              AQUA_TOKEN=<<parameters.token>>
              MICROSCANNER_OPTIONS=<<parameters.microscanner_options>>
              MICROSCANNER_OPTIONS="${MICROSCANNER_OPTIONS} --html" ./MicroScanner.sh <<parameters.image>> | sed -n '/<!DOCTYPE html>/,/<\/body>/p' > ../scanresult/AquaMicroscannerOutput.html
              echo These options were sent to MicroScanner -> $MICROSCANNER_OPTIONS

            else
              AQUA_TOKEN=<<parameters.token>>
              MICROSCANNER_OPTIONS=<<parameters.microscanner_options>>
              MICROSCANNER_OPTIONS="${MICROSCANNER_OPTIONS} --json" ./MicroScanner.sh <<parameters.image>> | sed -n '/<!DOCTYPE html>/,/<\/body>/p' > ../scanresult/AquaMicroscannerOutput.json
              echo These options were sent to MicroScanner -> $MICROSCANNER_OPTIONS
            fi

      - store_artifacts:
          path: scanresult

jobs:
  scan-image:
    executor: default
    parameters:
      token:
        description: The Aqua microscanner token
        type: string
        default: $AQUA_TOKEN
      microscanner_options:
        description: This var allows for option flags to be passed to the MicroScanner.
        type: string
        default: $MICROSCANNER_OPTIONS
      image:
        description: The image to scan
        type: string
      artifact-type:
        description: The type of artifact to output
        type: string
        default: html
      dockerfile-path:
        description: The path to your Dockerfile
        type: string
        default: .
    steps:
      - install
      - scan:
          image: <<parameters.image>>
